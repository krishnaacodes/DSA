LEETCODE 234


234. Palindrome Linked List

Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:

Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

-> The number of nodes in the list is in the range [1, 105].
-> 0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?


// SOLUTION.  


// Brute Force . 


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
    
        vector<int> ans;
         while(head != NULL){
            ans.push_back(head->val);
            head=head->next;

         }
         int n = ans.size();
         int i = 0 , j = n-1;
         while(i<j){
            if(ans[i]!=ans[j]) return false;
            i++;
            j--;
         }
        return true;
    }
};


// Optimal approach

